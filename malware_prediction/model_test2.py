import psutil
import pandas as pd
import numpy as np
import tensorflow as tf
from sklearn.preprocessing import StandardScaler

CPU_THRESHOLD = 70.0
MEMORY_THRESHOLD = 2_000_000_000

FEATURE_COLUMNS = [
    'vector', 'memory', 'tx_packets', 'rx_bytes', 'swap', 'rx_packets',
    'cpu_sys', 'total_pro', 'cpu_user', 'max_pid', 'tx_bytes', 'malware'
]

def collect_process_data():
    processes = []
    net_io = psutil.net_io_counters()
    swap = psutil.swap_memory().used
    all_pids = psutil.pids()
    total_processes = len(all_pids)
    max_pid = max(all_pids) if all_pids else 0

    for proc in psutil.process_iter(['pid', 'memory_info', 'cpu_times', 'name']):
        try:
            info = proc.info
            pid = info['pid']
            memory = info['memory_info'].rss if 'memory_info' in info else 0
            process_name = info.get('name', 'Unknown')
            
            proc.cpu_percent(interval=None)
            cpu_percent = proc.cpu_percent(interval=0.1)
            
            is_malware = 0
            reason = None
            
            if cpu_percent > CPU_THRESHOLD or memory > MEMORY_THRESHOLD:
                is_malware = 1
                reasons = []
                if cpu_percent > CPU_THRESHOLD:
                    reasons.append(f"CPU: {cpu_percent:.1f}%")
                if memory > MEMORY_THRESHOLD:
                    reasons.append(f"Memory: {memory/1_000_000:.1f}MB")
                reason = " & ".join(reasons)
                
                print(f"⚠️ Suspicious: {process_name} (PID: {pid}) - {reason}")

            process_data = {
                'vector': pid,
                'memory': memory,
                'tx_packets': net_io.packets_sent,
                'rx_bytes': net_io.bytes_recv,
                'swap': swap,
                'rx_packets': net_io.packets_recv,
                'cpu_sys': info['cpu_times'].system if 'cpu_times' in info else 0,
                'cpu_user': info['cpu_times'].user if 'cpu_times' in info else 0,
                'total_pro': total_processes,
                'max_pid': max_pid,
                'tx_bytes': net_io.bytes_sent,
                'malware': is_malware,
                'process_name': process_name,
                'cpu_percent': cpu_percent,
                'detection_reason': reason
            }
            processes.append(process_data)

        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue

    return pd.DataFrame(processes).sort_values('vector').reset_index(drop=True)

def predict_with_ml_model(df, model_path="model_output/final_model.keras", scaler_path="model_output/scaler.pkl", seq_length=10):
    try:
        model_columns = [col for col in FEATURE_COLUMNS if col in df.columns]
        data = df[model_columns].values
        
        try:
            import pickle
            with open(scaler_path, 'rb') as f:
                scaler = pickle.load(f)
                scaled_data = scaler.transform(data)
        except (FileNotFoundError, IOError):
            print(f"Warning: Scaler not found at {scaler_path}, fitting on current data")
            scaler = StandardScaler()
            scaled_data = scaler.fit_transform(data)
        
        if len(scaled_data) < seq_length:
            return None, f"Not enough processes ({len(scaled_data)}) to form a sequence"
        
        sequence = np.expand_dims(scaled_data[-seq_length:], axis=0)
        
        model = tf.keras.models.load_model(model_path)
        predictions = model.predict(sequence)
        predicted_class = np.argmax(predictions, axis=1)[0]
        confidence = predictions[0][predicted_class]
        
        return predicted_class, confidence
    except Exception as e:
        return None, str(e)

def main():
    import sys
    global CPU_THRESHOLD, MEMORY_THRESHOLD
    if len(sys.argv) > 1:
        CPU_THRESHOLD = float(sys.argv[1])
    if len(sys.argv) > 2:
        MEMORY_THRESHOLD = float(sys.argv[2]) * 1_000_000
    
    print(f"Monitoring processes (CPU threshold: {CPU_THRESHOLD}%, Memory: {MEMORY_THRESHOLD/1_000_000}MB)")
    
    df = collect_process_data()
    
    flagged_count = df['malware'].sum()
    print(f"\n=== Summary: {len(df)} processes scanned, {flagged_count} flagged as suspicious ===")
    
    predicted_class, result = predict_with_ml_model(df)
    if predicted_class is not None:
        print(f"\nML Model: {predicted_class} (1=malware, 0=normal), confidence: {result:.2f}")
    else:
        print(f"\nML detection skipped: {result}")

if __name__ == "__main__":
    main()
